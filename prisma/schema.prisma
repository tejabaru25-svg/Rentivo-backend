generator client {
  provider   = "prisma-client-js"
  engineType = "binary"   // force binary engine for Render (fix WASM build error)
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(uuid())
  name           String?
  email          String?      @unique
  phone          String?      @unique
  passwordhash   String
  role           String       @default("RENTER") // RENTER | OWNER | ADMIN
  kyc            KYC?
  createdAt      DateTime     @default(now()) @map("createdat")
  updatedAt      DateTime     @updatedAt @map("updatedat")
  items          Item[]       @relation("owner_items")
  bookings       Booking[]
  payments       Payment[]
  issues         Issue[]      // issues raised by this user
  isverified     Boolean      @default(false)
  resolvedIssues Issue[]      @relation("IssueResolvedBy") // admin dispute resolution
  devices        UserDevice[] // FCM device tokens
  conversationsO Conversation[] @relation("OwnerConversations")
  conversationsR Conversation[] @relation("RenterConversations")
  messages       Message[]    // messages sent
}

model UserDevice {
  id        String   @id @default(cuid())
  userId    String   @map("userid")
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  platform  String   // "ios" | "android" | "web"
  createdAt DateTime @default(now()) @map("createdat")
}

model Item {
  id           String        @id @default(uuid())
  ownerId      String        @map("ownerid")
  owner        User          @relation("owner_items", fields: [ownerId], references: [id])
  title        String
  description  String?
  category     String
  priceperday  Int
  available    Boolean       @default(true)
  photos       String[]
  location     String
  createdAt    DateTime      @default(now()) @map("createdat")
  updatedAt    DateTime      @updatedAt @map("updatedat")
  bookings     Booking[]
  availability Availability[]
}

model Availability {
  id        String   @id @default(uuid())
  itemId    String   @map("itemid")
  item      Item     @relation(fields: [itemId], references: [id])
  startDate DateTime @map("startdate")
  endDate   DateTime @map("enddate")
  isBooked  Boolean  @default(false) @map("isbooked")
  createdAt DateTime @default(now()) @map("createdat")
}

model Booking {
  id              String         @id @default(uuid())
  itemId          String         @map("itemid")
  item            Item           @relation(fields: [itemId], references: [id])
  renterId        String         @map("renterid")
  renter          User           @relation(fields: [renterId], references: [id])
  startDate       DateTime       @map("startdate")
  endDate         DateTime       @map("enddate")
  status          String         @default("PENDING")
  handoverPhoto   String?        @map("handoverphoto")
  handoverNotes   String?        @map("handovernotes")
  returnPhoto     String?        @map("returnphoto")
  returnNotes     String?        @map("returnnotes")
  extendedUntil   DateTime?      @map("extendeduntil")
  insuranceFee    Int?           @map("insurancefee")
  insurancePoolId String?        @map("insurancepoolid")
  insurancePool   InsurancePool? @relation("BookingInsurance", fields: [insurancePoolId], references: [id])
  payment         Payment?
  createdAt       DateTime @default(now()) @map("createdat")
  updatedAt       DateTime @updatedAt @map("updatedat")
  issues          Issue[]
}

model Payment {
  id                String   @id @default(uuid())
  bookingId         String   @unique @map("bookingid")
  booking           Booking  @relation(fields: [bookingId], references: [id])
  userId            String?  @map("userid")
  user              User?    @relation(fields: [userId], references: [id])
  amount            Int
  insuranceFee      Int      @map("insurancefee")
  platformFee       Int      @map("platformfee")
  razorpayOrderId   String?  @map("razorpayorderid")
  razorpayPaymentId String?  @map("razorpaypaymentid")
  status            String   @default("PENDING")
  createdAt         DateTime @default(now()) @map("createdat")
}

model KYC {
  id              String   @id @default(uuid())
  userId          String   @unique @map("userid")
  user            User     @relation(fields: [userId], references: [id])
  panUrl          String?  @map("panurl")
  aadhaarFrontUrl String?  @map("aadhaarfronturl")
  aadhaarBackUrl  String?  @map("aadhaarbackurl")
  verified        String   @default("pending")
  submittedAt     DateTime? @map("submittedat")
  createdAt       DateTime @default(now()) @map("createdat")
}

model InsurancePool {
  id        String    @id @default(uuid())
  balance   Int       @default(0)
  bookings  Booking[] @relation("BookingInsurance")
  issues    Issue[]   @relation("InsurancePoolIssues")
  createdAt DateTime  @default(now()) @map("createdat")
  updatedAt DateTime  @updatedAt @map("updatedat")
}

model Issue {
  id              String         @id @default(uuid())
  bookingId       String?        @map("bookingid")
  booking         Booking?       @relation(fields: [bookingId], references: [id])
  userId          String         @map("userid")
  user            User           @relation(fields: [userId], references: [id])
  description     String
  photos          String[]
  status          String         @default("OPEN")
  resolutionNote  String?        @map("resolutionnote")
  resolvedById    String?        @map("resolvedbyid")
  resolvedBy      User?          @relation("IssueResolvedBy", fields: [resolvedById], references: [id])
  insurancePoolId String?        @map("insurancepoolid")
  insurancePool   InsurancePool? @relation("InsurancePoolIssues", fields: [insurancePoolId], references: [id])
  createdAt       DateTime       @default(now()) @map("createdat")
  updatedAt       DateTime       @updatedAt @map("updatedat")
}

//
// üó®Ô∏è Chat system
//
model Conversation {
  id        String    @id @default(uuid())
  ownerId   String    @map("ownerid")
  renterId  String    @map("renterid")
  owner     User      @relation("OwnerConversations", fields: [ownerId], references: [id])
  renter    User      @relation("RenterConversations", fields: [renterId], references: [id])
  messages  Message[]
  createdAt DateTime  @default(now()) @map("createdat")
  updatedAt DateTime  @updatedAt @map("updatedat")
}

model Message {
  id             String       @id @default(uuid())
  conversationId String       @map("conversationid")
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       String       @map("senderid")
  sender         User         @relation(fields: [senderId], references: [id])
  text           String
  createdAt      DateTime     @default(now()) @map("createdat")
}
