generator client {
  provider   = "prisma-client-js"
  engineType = "binary"   // force binary engine for Render (fix WASM build error)
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(uuid())
  name            String?
  email           String?      @unique
  phone           String?      @unique
  passwordhash    String
  role            String       @default("RENTER") // RENTER | OWNER | ADMIN
  kyc             KYC?
  createdat       DateTime     @default(now())
  updatedat       DateTime     @updatedAt
  items           Item[]       @relation("owner_items")
  bookings        Booking[]
  payments        Payment[]
  issues          Issue[]      // issues raised by this user
  isverified      Boolean      @default(false)
  resolvedIssues  Issue[]      @relation("IssueResolvedBy") // admin dispute resolution
  devices         UserDevice[] // FCM device tokens

  // ðŸ”‘ Added for password reset
  resetToken       String?
  resetTokenExpiry DateTime?
}

model UserDevice {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  platform  String   // "ios" | "android" | "web"
  createdAt DateTime @default(now())
}

model Item {
  id           String        @id @default(uuid())
  ownerid      String
  owner        User          @relation("owner_items", fields: [ownerid], references: [id])
  title        String
  description  String?
  category     String
  priceperday  Int
  available    Boolean       @default(true)
  photos       String[]
  location     String
  createdat    DateTime      @default(now())
  updatedat    DateTime      @updatedAt
  bookings     Booking[]
  availability Availability[]
}

model Availability {
  id        String   @id @default(uuid())
  itemid    String
  item      Item     @relation(fields: [itemid], references: [id])
  startdate DateTime
  enddate   DateTime
  isbooked  Boolean  @default(false)
  createdat DateTime @default(now())
}

model Booking {
  id              String         @id @default(uuid())
  itemid          String
  item            Item           @relation(fields: [itemid], references: [id])
  renterid        String
  renter          User           @relation(fields: [renterid], references: [id])
  startdate       DateTime
  enddate         DateTime
  status          String         @default("PENDING") // PENDING | CONFIRMED | ONGOING | COMPLETED | CANCELLED
  handoverphoto   String?
  handovernotes   String?
  returnphoto     String?
  returnnotes     String?
  extendeduntil   DateTime?
  insurancefee    Int?
  insurancepoolid String?
  insurancepool   InsurancePool? @relation("BookingInsurance", fields: [insurancepoolid], references: [id])
  payment         Payment?
  createdat       DateTime @default(now())
  updatedat       DateTime @updatedAt
  issues          Issue[]
}

model Payment {
  id                String   @id @default(uuid())
  bookingid         String   @unique
  booking           Booking  @relation(fields: [bookingid], references: [id])
  userid            String?
  user              User?    @relation(fields: [userid], references: [id])
  amount            Int
  insurancefee      Int
  platformfee       Int
  razorpayorderid   String?
  razorpaypaymentid String?
  status            String   @default("PENDING") // PENDING | PAID | REFUNDED
  createdat         DateTime @default(now())
}

model KYC {
  id              String   @id @default(uuid())
  userid          String   @unique
  user            User     @relation(fields: [userid], references: [id])
  panurl          String?
  aadhaarfronturl String?
  aadhaarbackurl  String?
  verified        String   @default("pending") // pending | approved | rejected
  submittedat     DateTime?
  createdat       DateTime @default(now())
}

model InsurancePool {
  id        String    @id @default(uuid())
  balance   Int       @default(0)
  bookings  Booking[] @relation("BookingInsurance")
  issues    Issue[]   @relation("InsurancePoolIssues")
  createdat DateTime  @default(now())
  updatedat DateTime  @updatedAt
}

model Issue {
  id              String         @id @default(uuid())
  bookingid       String?
  booking         Booking?       @relation(fields: [bookingid], references: [id])
  userid          String
  user            User           @relation(fields: [userid], references: [id])
  description     String
  photos          String[]
  status          String         @default("OPEN") // OPEN | APPROVED | REJECTED | RESOLVED
  resolutionnote  String?
  resolvedbyid    String?
  resolvedby      User?          @relation("IssueResolvedBy", fields: [resolvedbyid], references: [id])
  insurancepoolid String?
  insurancepool   InsurancePool? @relation("InsurancePoolIssues", fields: [insurancepoolid], references: [id])
  createdat       DateTime       @default(now())
  updatedat       DateTime       @updatedAt
}
