generator client {
  provider   = "prisma-client-js"
  engineType = "binary"   // âœ… force binary engine for Render (fix build error)
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  name         String?
  email        String?    @unique
  phone        String?    @unique
  passwordhash String
  role         String     @default("RENTER")
  kyc          KYC?
  createdat    DateTime   @default(now())
  updatedat    DateTime   @default(now())
  items        Item[]     @relation("owner_items")
  bookings     Booking[]
  payments     Payment[]
  issues       Issue[]
  fcmtoken     String?
  isverified   Boolean    @default(false)
}

model Item {
  id          String   @id @default(uuid())
  ownerid     String
  owner       User     @relation("owner_items", fields: [ownerid], references: [id])
  title       String
  description String?
  category    String
  priceperday Int
  available   Boolean  @default(true)
  photos      String[]
  location    String
  createdat   DateTime @default(now())
  updatedat   DateTime @default(now())
  bookings    Booking[]
}

model Booking {
  id            String   @id @default(uuid())
  itemid        String
  item          Item     @relation(fields: [itemid], references: [id])
  renterid      String
  renter        User     @relation(fields: [renterid], references: [id])
  startdate     DateTime
  enddate       DateTime
  status        String   @default("PENDING")
  handoverphoto String?
  createdat     DateTime @default(now())
  updatedat     DateTime @default(now())
  payment       Payment?
}

model Payment {
  id                String   @id @default(uuid())
  bookingid         String   @unique
  booking           Booking  @relation(fields: [bookingid], references: [id])
  amount            Int
  insurancefee      Int
  platformfee       Int
  razorpayorderid   String?
  razorpaypaymentid String?
  status            String   @default("PENDING")
  createdat         DateTime @default(now())
  userid            String?
  user              User?    @relation(fields: [userid], references: [id])
}

model KYC {
  id              String   @id @default(uuid())
  userid          String   @unique
  user            User     @relation(fields: [userid], references: [id])
  panurl          String?
  aadhaarfronturl String?
  aadhaarbackurl  String?
  verified        Boolean  @default(false)
  submittedat     DateTime?
}

model Issue {
  id          String   @id @default(uuid())
  bookingid   String?
  userid      String
  user        User     @relation(fields: [userid], references: [id])
  description String
  photos      String[]
  status      String   @default("OPEN")
  createdat   DateTime @default(now())
}
