generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  name         String?
  email        String?    @unique
  phone        String?    @unique
  passwordhash String
  role         String     @default("RENTER")
  kyc          KYC?
  createdat    DateTime   @default(now())
  updatedat    DateTime   @default(now())
  items        Item[]     @relation("owner_items")
  bookings     Booking[]
  payments     Payment[]
  issues       Issue[]
  fcmtoken     String?
  isverified   Boolean    @default(false)
}

model Item {
  id          String   @id @default(uuid())
  ownerId     String
  owner       User     @relation("owner_items", fields: [ownerId], references: [id])
  title       String
  description String?
  category    String
  pricePerDay Int
  available   Boolean  @default(true)
  photos      String[]
  location    String
  createdat   DateTime @default(now())
  updatedat   DateTime @default(now())
  bookings    Booking[]
}

model Booking {
  id            String        @id @default(uuid())
  itemId        String
  item          Item          @relation(fields: [itemId], references: [id])
  renterId      String
  renter        User          @relation(fields: [renterId], references: [id])
  startDate     DateTime
  endDate       DateTime
  status        BookingStatus @default(PENDING)
  handoverPhoto String?
  createdat     DateTime      @default(now())
  updatedat     DateTime      @default(now())
  payment       Payment?
}

model Payment {
  id                String   @id @default(uuid())
  bookingId         String   @unique
  booking           Booking  @relation(fields: [bookingId], references: [id])
  amount            Int
  insuranceFee      Int
  platformFee       Int
  razorpayOrderId   String?
  razorpayPaymentId String?
  status            PaymentStatus @default(PENDING)
  createdat         DateTime @default(now())
  userId            String?
  user              User?     @relation(fields: [userId], references: [id])
}

model KYC {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  panUrl          String?
  aadhaarFrontUrl String?
  aadhaarBackUrl  String?
  verified        Boolean  @default(false)
  submittedAt     DateTime?
}

model Issue {
  id          String   @id @default(uuid())
  bookingId   String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  description String
  photos      String[]
  status      String   @default("OPEN")
  createdat   DateTime @default(now())
}

enum BookingStatus {
  PENDING
  CONFIRMED
  ACTIVE
  RETURNED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
}
